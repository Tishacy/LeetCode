package dp;

/**
 * 91. 解码方法
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。
 * 例如，"111" 可以将 "1" 中的每个 "1" 映射为 "A" ，从而得到 "AAA" ，或者可以将 "11" 和 "1"（分别为 "K" 和 "A" ）映射为 "KA" 。
 * 注意，"06" 不能映射为 "F" ，因为 "6" 和 "06" 不同。
 * 给你一个只含数字的 非空 字符串 num ，请计算并返回 解码 方法的 总数 。
 * 题目数据保证答案肯定是一个 32 位 的整数。
 *
 * 示例 1：
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 *
 * 示例 2：
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 *
 * 示例 3：
 * 输入：s = "0"
 * 输出：0
 * 解释：没有字符映射到以 0 开头的数字。含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 *
 * 示例 4：
 * 输入：s = "1"
 * 输出：1
 *
 * 提示：
 * 1 <= s.length <= 100
 * s 只包含数字，并且可能包含前导零。
 */
public class DecodeWays_91 {

    /**
     * 思路：求组合的具体方案，通常用 DFS+回溯，求组合的数目，通常用动态规划。
     * dp[i] 表示为前 i 个字母的解码方法数。
     *      220 ->  2 20
     *      2201 -> 2 20 1
     *      221 ->  2 21
     *              22 1
     *              2 2 1
     *      2210 -> 2 21 0  ×
     *              22 1 0  ×
     *              2 2 1 0 ×
     *              22 10
     *              2 2 10
     *
     *  23443205x 追加新添加一个 y
     *              y=0                                         y=1~9
     *  x=0     整个无法解码，return 0                   y可解码，xy无法解码，dp[i] = dp[i-1]
     *  x=1     y不可解码，xy可解码，dp[i] = dp[i-2]     y可解码，xy也可解码，dp[i] = dp[i-2] + dp[i-1]
     *  x=2     y不可解码，xy可解码，dp[i] = dp[i-2]     y=1~6，y可解码，xy也可解码 dp[i] = dp[i-2] + dp[i-1]
     *                                                y>6, y可解码，xy不可解码 dp[i] = dp[i-1]
     *  x>2     整个无法解码, return 0                  y可解码，xy无法解码，dp[i] = dp[i-1]
     *
     *  总结：
     *  如果 y 可以解码，xy 也可以解码 dp[i] = dp[i-2] + dp[i-1]
     *  如果 y 可以解码，xy 无法解码，dp[i] = dp[i-1]
     *  如果 y 不可解码，xy 可以解码，dp[i] = dp[i-2]
     *  如果 y 不可解码，xy 也不可解码，dp[i] = 0
     * @param args
     */
    public static void main(String[] args) {

    }
}
